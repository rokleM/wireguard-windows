{
    "language": "fr",
    "messages": [
        {
            "id": "Error",
            "message": "Error",
            "translation": ""
        },
        {
            "id": "(no argument): elevate and install manager service",
            "message": "(no argument): elevate and install manager service",
            "translation": ""
        },
        {
            "id": "Usage: {Args0} [\n{String}]",
            "message": "Usage: {Args0} [\n{String}]",
            "translation": "",
            "placeholders": [
                {
                    "id": "Args0",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "os.Args[0]"
                },
                {
                    "id": "String",
                    "string": "%[2]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "builder.String()"
                }
            ]
        },
        {
            "id": "Command Line Options",
            "message": "Command Line Options",
            "translation": ""
        },
        {
            "id": "Unable to determine whether the process is running under WOW64: {Err}",
            "message": "Unable to determine whether the process is running under WOW64: {Err}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "You must use the 64-bit version of WireGuard on this computer.",
            "message": "You must use the 64-bit version of WireGuard on this computer.",
            "translation": ""
        },
        {
            "id": "Unable to open current process token: {Err}",
            "message": "Unable to open current process token: {Err}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "WireGuard may only be used by users who are a member of the Builtin {AdminGroupName} group.",
            "message": "WireGuard may only be used by users who are a member of the Builtin {AdminGroupName} group.",
            "translation": "",
            "placeholders": [
                {
                    "id": "AdminGroupName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "elevate.AdminGroupName()"
                }
            ]
        },
        {
            "id": "WireGuard is running, but the UI is only accessible from desktops of the Builtin {AdminGroupName} group.",
            "message": "WireGuard is running, but the UI is only accessible from desktops of the Builtin {AdminGroupName} group.",
            "translation": "",
            "placeholders": [
                {
                    "id": "AdminGroupName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "elevate.AdminGroupName()"
                }
            ]
        },
        {
            "id": "WireGuard system tray icon did not appear after 30 seconds.",
            "message": "WireGuard system tray icon did not appear after 30 seconds.",
            "translation": ""
        },
        {
            "id": "Now",
            "message": "Now",
            "translation": ""
        },
        {
            "id": "System clock wound backward!",
            "message": "System clock wound backward!",
            "translation": ""
        },
        {
            "id": "{Years} year(s)",
            "message": "{Years} year(s)",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Years",
                    "cases": {
                        "one": {
                            "msg": "{Years} year"
                        },
                        "other": {
                            "msg": "{Years} years"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Years",
                    "string": "%[1]d",
                    "type": "int64",
                    "underlyingType": "int64",
                    "argNum": 1,
                    "expr": "years"
                }
            ]
        },
        {
            "id": "{Days} day(s)",
            "message": "{Days} day(s)",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Days",
                    "cases": {
                        "one": {
                            "msg": "{Days} day"
                        },
                        "other": {
                            "msg": "{Days} days"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Days",
                    "string": "%[1]d",
                    "type": "int64",
                    "underlyingType": "int64",
                    "argNum": 1,
                    "expr": "days"
                }
            ]
        },
        {
            "id": "{Hours} hour(s)",
            "message": "{Hours} hour(s)",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Hours",
                    "cases": {
                        "one": {
                            "msg": "{Hours} hour"
                        },
                        "other": {
                            "msg": "{Hours} hours"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Hours",
                    "string": "%[1]d",
                    "type": "int64",
                    "underlyingType": "int64",
                    "argNum": 1,
                    "expr": "hours"
                }
            ]
        },
        {
            "id": "{Minutes} minute(s)",
            "message": "{Minutes} minute(s)",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Minutes",
                    "cases": {
                        "one": {
                            "msg": "{Minutes} minute"
                        },
                        "other": {
                            "msg": "{Minutes} minutes"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Minutes",
                    "string": "%[1]d",
                    "type": "int64",
                    "underlyingType": "int64",
                    "argNum": 1,
                    "expr": "minutes"
                }
            ]
        },
        {
            "id": "{Seconds} second(s)",
            "message": "{Seconds} second(s)",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Seconds",
                    "cases": {
                        "one": {
                            "msg": "{Seconds} second"
                        },
                        "other": {
                            "msg": "{Seconds} seconds"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Seconds",
                    "string": "%[1]d",
                    "type": "int64",
                    "underlyingType": "int64",
                    "argNum": 1,
                    "expr": "seconds"
                }
            ]
        },
        {
            "id": "{Timestamp} ago",
            "message": "{Timestamp} ago",
            "translation": "",
            "placeholders": [
                {
                    "id": "Timestamp",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "timestamp"
                }
            ]
        },
        {
            "id": "{Bytes} B",
            "message": "{Bytes} B",
            "translation": "",
            "placeholders": [
                {
                    "id": "Bytes",
                    "string": "%[1]d",
                    "type": "golang.zx2c4.com/wireguard/windows/conf.Bytes",
                    "underlyingType": "uint64",
                    "argNum": 1,
                    "expr": "b"
                }
            ]
        },
        {
            "id": "{Float64b__1024} KiB",
            "message": "{Float64b__1024} KiB",
            "translation": "",
            "placeholders": [
                {
                    "id": "Float64b__1024",
                    "string": "%.2[1]f",
                    "type": "float64",
                    "underlyingType": "float64",
                    "argNum": 1,
                    "expr": "float64(b) / 1024"
                }
            ]
        },
        {
            "id": "{Float64b__1024__1024} MiB",
            "message": "{Float64b__1024__1024} MiB",
            "translation": "",
            "placeholders": [
                {
                    "id": "Float64b__1024__1024",
                    "string": "%.2[1]f",
                    "type": "float64",
                    "underlyingType": "float64",
                    "argNum": 1,
                    "expr": "float64(b) / (1024 * 1024)"
                }
            ]
        },
        {
            "id": "{Float64b__1024__1024__1024} GiB",
            "message": "{Float64b__1024__1024__1024} GiB",
            "translation": "",
            "placeholders": [
                {
                    "id": "Float64b__1024__1024__1024",
                    "string": "%.2[1]f",
                    "type": "float64",
                    "underlyingType": "float64",
                    "argNum": 1,
                    "expr": "float64(b) / (1024 * 1024 * 1024)"
                }
            ]
        },
        {
            "id": "{Float64b__1024__1024__1024__1024} TiB",
            "message": "{Float64b__1024__1024__1024__1024} TiB",
            "translation": "",
            "placeholders": [
                {
                    "id": "Float64b__1024__1024__1024__1024",
                    "string": "%.2[1]f",
                    "type": "float64",
                    "underlyingType": "float64",
                    "argNum": 1,
                    "expr": "float64(b) / (1024 * 1024 * 1024) / 1024"
                }
            ]
        },
        {
            "id": "{Why}: {Offender}",
            "message": "{Why}: {Offender}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Why",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "e.why"
                },
                {
                    "id": "Offender",
                    "string": "%[2]q",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "e.offender"
                }
            ]
        },
        {
            "id": "Invalid IP address",
            "message": "Invalid IP address",
            "translation": ""
        },
        {
            "id": "Invalid network prefix length",
            "message": "Invalid network prefix length",
            "translation": ""
        },
        {
            "id": "Missing port from endpoint",
            "message": "Missing port from endpoint",
            "translation": ""
        },
        {
            "id": "Invalid endpoint host",
            "message": "Invalid endpoint host",
            "translation": ""
        },
        {
            "id": "Brackets must contain an IPv6 address",
            "message": "Brackets must contain an IPv6 address",
            "translation": ""
        },
        {
            "id": "Invalid MTU",
            "message": "Invalid MTU",
            "translation": ""
        },
        {
            "id": "Invalid port",
            "message": "Invalid port",
            "translation": ""
        },
        {
            "id": "Invalid persistent keepalive",
            "message": "Invalid persistent keepalive",
            "translation": ""
        },
        {
            "id": "Invalid key: {Err}",
            "message": "Invalid key: {Err}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "Keys must decode to exactly 32 bytes",
            "message": "Keys must decode to exactly 32 bytes",
            "translation": ""
        },
        {
            "id": "Number must be a number between 0 and 2^64-1: {Err}",
            "message": "Number must be a number between 0 and 2^64-1: {Err}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "Two commas in a row",
            "message": "Two commas in a row",
            "translation": ""
        },
        {
            "id": "Tunnel name is not valid",
            "message": "Tunnel name is not valid",
            "translation": ""
        },
        {
            "id": "Line must occur in a section",
            "message": "Line must occur in a section",
            "translation": ""
        },
        {
            "id": "Invalid config key is missing an equals separator",
            "message": "Invalid config key is missing an equals separator",
            "translation": ""
        },
        {
            "id": "Key must have a value",
            "message": "Key must have a value",
            "translation": ""
        },
        {
            "id": "Invalid key for [Interface] section",
            "message": "Invalid key for [Interface] section",
            "translation": ""
        },
        {
            "id": "Invalid key for [Peer] section",
            "message": "Invalid key for [Peer] section",
            "translation": ""
        },
        {
            "id": "An interface must have a private key",
            "message": "An interface must have a private key",
            "translation": ""
        },
        {
            "id": "[none specified]",
            "message": "[none specified]",
            "translation": ""
        },
        {
            "id": "All peers must have public keys",
            "message": "All peers must have public keys",
            "translation": ""
        },
        {
            "id": "Error in getting configuration",
            "message": "Error in getting configuration",
            "translation": ""
        },
        {
            "id": "Invalid key for interface section",
            "message": "Invalid key for interface section",
            "translation": ""
        },
        {
            "id": "Protocol version must be 1",
            "message": "Protocol version must be 1",
            "translation": ""
        },
        {
            "id": "Invalid key for peer section",
            "message": "Invalid key for peer section",
            "translation": ""
        },
        {
            "id": "[EnumerationSeparator]",
            "message": "[EnumerationSeparator]",
            "translation": ", ",
            "comment": "Text to insert between items when listing - most western languages will translate ‘[EnumerationSeparator]’ into ‘, ’ to produce lists like ‘apple, orange, strawberry’. Eastern languages might translate into ‘、’ to produce lists like ‘リンゴ、オレンジ、イチゴ’."
        },
        {
            "id": "[UnitSeparator]",
            "message": "[UnitSeparator]",
            "translation": " ",
            "comment": "Text to insert when combining units of a measure - most languages will translate ‘[UnitSeparator]’ into ‘ ’ (space) to produce lists like ‘2 minuti 30 sekund’, or empty string ‘’ to produce ‘2分30秒’."
        },
        {
            "id": "About WireGuard",
            "message": "About WireGuard",
            "translation": ""
        },
        {
            "id": "WireGuard logo image",
            "message": "WireGuard logo image",
            "translation": ""
        },
        {
            "id": "App version: {Number}\nGo backend version: {WireGuardGoVersion}\nGo version: {Version_go}\nOperating system: {OsName}\nArchitecture: {GOARCH}",
            "message": "App version: {Number}\nGo backend version: {WireGuardGoVersion}\nGo version: {Version_go}\nOperating system: {OsName}\nArchitecture: {GOARCH}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Number",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "version.Number"
                },
                {
                    "id": "WireGuardGoVersion",
                    "string": "%[2]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "device.WireGuardGoVersion"
                },
                {
                    "id": "Version_go",
                    "string": "%[3]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 3,
                    "expr": "strings.TrimPrefix(runtime.Version(), \"go\")"
                },
                {
                    "id": "OsName",
                    "string": "%[4]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 4,
                    "expr": "version.OsName()"
                },
                {
                    "id": "GOARCH",
                    "string": "%[5]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 5,
                    "expr": "runtime.GOARCH"
                }
            ]
        },
        {
            "id": "Close",
            "message": "Close",
            "translation": ""
        },
        {
            "id": "♥ \u0026Donate!",
            "message": "♥ \u0026Donate!",
            "translation": ""
        },
        {
            "id": "Status:",
            "message": "Status:",
            "translation": ""
        },
        {
            "id": "\u0026Deactivate",
            "message": "\u0026Deactivate",
            "translation": ""
        },
        {
            "id": "\u0026Activate",
            "message": "\u0026Activate",
            "translation": ""
        },
        {
            "id": "Public key:",
            "message": "Public key:",
            "translation": ""
        },
        {
            "id": "Listen port:",
            "message": "Listen port:",
            "translation": ""
        },
        {
            "id": "MTU:",
            "message": "MTU:",
            "translation": ""
        },
        {
            "id": "Addresses:",
            "message": "Addresses:",
            "translation": ""
        },
        {
            "id": "DNS servers:",
            "message": "DNS servers:",
            "translation": ""
        },
        {
            "id": "Preshared key:",
            "message": "Preshared key:",
            "translation": ""
        },
        {
            "id": "Allowed IPs:",
            "message": "Allowed IPs:",
            "translation": ""
        },
        {
            "id": "Endpoint:",
            "message": "Endpoint:",
            "translation": ""
        },
        {
            "id": "Persistent keepalive:",
            "message": "Persistent keepalive:",
            "translation": ""
        },
        {
            "id": "Latest handshake:",
            "message": "Latest handshake:",
            "translation": ""
        },
        {
            "id": "Transfer:",
            "message": "Transfer:",
            "translation": ""
        },
        {
            "id": "enabled",
            "message": "enabled",
            "translation": ""
        },
        {
            "id": "{String} received, {String_1} sent",
            "message": "{String} received, {String_1} sent",
            "translation": "",
            "placeholders": [
                {
                    "id": "String",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "c.RxBytes.String()"
                },
                {
                    "id": "String_1",
                    "string": "%[2]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "c.TxBytes.String()"
                }
            ]
        },
        {
            "id": "Failed to determine tunnel state",
            "message": "Failed to determine tunnel state",
            "translation": ""
        },
        {
            "id": "Failed to activate tunnel",
            "message": "Failed to activate tunnel",
            "translation": ""
        },
        {
            "id": "Failed to deactivate tunnel",
            "message": "Failed to deactivate tunnel",
            "translation": ""
        },
        {
            "id": "Interface: {Name}",
            "message": "Interface: {Name}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "config.Name"
                }
            ]
        },
        {
            "id": "Peer",
            "message": "Peer",
            "translation": ""
        },
        {
            "id": "Create new tunnel",
            "message": "Create new tunnel",
            "translation": ""
        },
        {
            "id": "Edit tunnel",
            "message": "Edit tunnel",
            "translation": ""
        },
        {
            "id": "\u0026Name:",
            "message": "\u0026Name:",
            "translation": ""
        },
        {
            "id": "\u0026Public key:",
            "message": "\u0026Public key:",
            "translation": ""
        },
        {
            "id": "(unknown)",
            "message": "(unknown)",
            "translation": ""
        },
        {
            "id": "\u0026Block untunneled traffic (kill-switch)",
            "message": "\u0026Block untunneled traffic (kill-switch)",
            "translation": ""
        },
        {
            "id": "When a configuration has exactly one peer, and that peer has an allowed IPs containing at least one of 0.0.0.0/0 or ::/0, then the tunnel service engages a firewall ruleset to block all traffic that is neither to nor from the tunnel interface, with special exceptions for DHCP and NDP.",
            "message": "When a configuration has exactly one peer, and that peer has an allowed IPs containing at least one of 0.0.0.0/0 or ::/0, then the tunnel service engages a firewall ruleset to block all traffic that is neither to nor from the tunnel interface, with special exceptions for DHCP and NDP.",
            "translation": ""
        },
        {
            "id": "\u0026Save",
            "message": "\u0026Save",
            "translation": ""
        },
        {
            "id": "Cancel",
            "message": "Cancel",
            "translation": ""
        },
        {
            "id": "\u0026Configuration:",
            "message": "\u0026Configuration:",
            "translation": ""
        },
        {
            "id": "Invalid name",
            "message": "Invalid name",
            "translation": ""
        },
        {
            "id": "A name is required.",
            "message": "A name is required.",
            "translation": ""
        },
        {
            "id": "Tunnel name ‘{NewName}’ is invalid.",
            "message": "Tunnel name ‘{NewName}’ is invalid.",
            "translation": "",
            "placeholders": [
                {
                    "id": "NewName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "newName"
                }
            ]
        },
        {
            "id": "Unable to list existing tunnels",
            "message": "Unable to list existing tunnels",
            "translation": ""
        },
        {
            "id": "Tunnel already exists",
            "message": "Tunnel already exists",
            "translation": ""
        },
        {
            "id": "Another tunnel already exists with the name ‘{NewName}’.",
            "message": "Another tunnel already exists with the name ‘{NewName}’.",
            "translation": "",
            "placeholders": [
                {
                    "id": "NewName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "newName"
                }
            ]
        },
        {
            "id": "Unable to create new configuration",
            "message": "Unable to create new configuration",
            "translation": ""
        },
        {
            "id": "Writing file failed",
            "message": "Writing file failed",
            "translation": ""
        },
        {
            "id": "File ‘{FilePath}’ already exists.\n\nDo you want to overwrite it?",
            "message": "File ‘{FilePath}’ already exists.\n\nDo you want to overwrite it?",
            "translation": "",
            "placeholders": [
                {
                    "id": "FilePath",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "filePath"
                }
            ]
        },
        {
            "id": "Active",
            "message": "Active",
            "translation": ""
        },
        {
            "id": "Activating",
            "message": "Activating",
            "translation": ""
        },
        {
            "id": "Inactive",
            "message": "Inactive",
            "translation": ""
        },
        {
            "id": "Deactivating",
            "message": "Deactivating",
            "translation": ""
        },
        {
            "id": "Unknown state",
            "message": "Unknown state",
            "translation": ""
        },
        {
            "id": "Log",
            "message": "Log",
            "translation": ""
        },
        {
            "id": "\u0026Copy",
            "message": "\u0026Copy",
            "translation": ""
        },
        {
            "id": "Select \u0026all",
            "message": "Select \u0026all",
            "translation": ""
        },
        {
            "id": "\u0026Save to file…",
            "message": "\u0026Save to file…",
            "translation": ""
        },
        {
            "id": "Time",
            "message": "Time",
            "translation": ""
        },
        {
            "id": "Log message",
            "message": "Log message",
            "translation": ""
        },
        {
            "id": "Text Files (*.txt)|*.txt|All Files (*.*)|*.*",
            "message": "Text Files (*.txt)|*.txt|All Files (*.*)|*.*",
            "translation": ""
        },
        {
            "id": "Export log to file",
            "message": "Export log to file",
            "translation": ""
        },
        {
            "id": "\u0026About WireGuard…",
            "message": "\u0026About WireGuard…",
            "translation": ""
        },
        {
            "id": "Tunnel Error",
            "message": "Tunnel Error",
            "translation": ""
        },
        {
            "id": "{ErrMsg}\n\nPlease consult the log for more information.",
            "message": "{ErrMsg}\n\nPlease consult the log for more information.",
            "translation": "",
            "placeholders": [
                {
                    "id": "ErrMsg",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "errMsg"
                }
            ]
        },
        {
            "id": "{Title} (out of date)",
            "message": "{Title} (out of date)",
            "translation": "",
            "placeholders": [
                {
                    "id": "Title",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "mtw.Title()"
                }
            ]
        },
        {
            "id": "WireGuard Detection Error",
            "message": "WireGuard Detection Error",
            "translation": ""
        },
        {
            "id": "Unable to wait for WireGuard window to appear: {Err}",
            "message": "Unable to wait for WireGuard window to appear: {Err}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "WireGuard: Deactivated",
            "message": "WireGuard: Deactivated",
            "translation": ""
        },
        {
            "id": "Status: Unknown",
            "message": "Status: Unknown",
            "translation": ""
        },
        {
            "id": "Addresses: None",
            "message": "Addresses: None",
            "translation": ""
        },
        {
            "id": "\u0026Manage tunnels…",
            "message": "\u0026Manage tunnels…",
            "translation": ""
        },
        {
            "id": "\u0026Import tunnel(s) from file…",
            "message": "\u0026Import tunnel(s) from file…",
            "translation": ""
        },
        {
            "id": "E\u0026xit",
            "message": "E\u0026xit",
            "translation": ""
        },
        {
            "id": "WireGuard Tunnel Error",
            "message": "WireGuard Tunnel Error",
            "translation": ""
        },
        {
            "id": "WireGuard: {TextForStateglobalState_true}",
            "message": "WireGuard: {TextForStateglobalState_true}",
            "translation": "",
            "placeholders": [
                {
                    "id": "TextForStateglobalState_true",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "textForState(globalState, true)"
                }
            ]
        },
        {
            "id": "Status: {StateText}",
            "message": "Status: {StateText}",
            "translation": "",
            "placeholders": [
                {
                    "id": "StateText",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "stateText"
                }
            ]
        },
        {
            "id": "Addresses: {String}",
            "message": "Addresses: {String}",
            "translation": "",
            "placeholders": [
                {
                    "id": "String",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "sb.String()"
                }
            ]
        },
        {
            "id": "WireGuard Activated",
            "message": "WireGuard Activated",
            "translation": ""
        },
        {
            "id": "The {Name} tunnel has been activated.",
            "message": "The {Name} tunnel has been activated.",
            "translation": "",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "tunnel.Name"
                }
            ]
        },
        {
            "id": "WireGuard Deactivated",
            "message": "WireGuard Deactivated",
            "translation": ""
        },
        {
            "id": "The {Name} tunnel has been deactivated.",
            "message": "The {Name} tunnel has been deactivated.",
            "translation": "",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "tunnel.Name"
                }
            ]
        },
        {
            "id": "An Update is Available!",
            "message": "An Update is Available!",
            "translation": ""
        },
        {
            "id": "WireGuard Update Available",
            "message": "WireGuard Update Available",
            "translation": ""
        },
        {
            "id": "An update to WireGuard is now available. You are advised to update as soon as possible.",
            "message": "An update to WireGuard is now available. You are advised to update as soon as possible.",
            "translation": ""
        },
        {
            "id": "Tunnels",
            "message": "Tunnels",
            "translation": ""
        },
        {
            "id": "\u0026Edit",
            "message": "\u0026Edit",
            "translation": ""
        },
        {
            "id": "Add \u0026empty tunnel…",
            "message": "Add \u0026empty tunnel…",
            "translation": ""
        },
        {
            "id": "Add Tunnel",
            "message": "Add Tunnel",
            "translation": ""
        },
        {
            "id": "Remove selected tunnel(s)",
            "message": "Remove selected tunnel(s)",
            "translation": ""
        },
        {
            "id": "Export all tunnels to zip",
            "message": "Export all tunnels to zip",
            "translation": ""
        },
        {
            "id": "\u0026Toggle",
            "message": "\u0026Toggle",
            "translation": ""
        },
        {
            "id": "Export all tunnels to \u0026zip…",
            "message": "Export all tunnels to \u0026zip…",
            "translation": ""
        },
        {
            "id": "Edit \u0026selected tunnel…",
            "message": "Edit \u0026selected tunnel…",
            "translation": ""
        },
        {
            "id": "\u0026Remove selected tunnel(s)",
            "message": "\u0026Remove selected tunnel(s)",
            "translation": ""
        },
        {
            "id": "Could not import selected configuration: {LastErr}",
            "message": "Could not import selected configuration: {LastErr}",
            "translation": "",
            "placeholders": [
                {
                    "id": "LastErr",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "lastErr"
                }
            ]
        },
        {
            "id": "Could not enumerate existing tunnels: {LastErr}",
            "message": "Could not enumerate existing tunnels: {LastErr}",
            "translation": "",
            "placeholders": [
                {
                    "id": "LastErr",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "lastErr"
                }
            ]
        },
        {
            "id": "Another tunnel already exists with the name ‘{Name}’",
            "message": "Another tunnel already exists with the name ‘{Name}’",
            "translation": "",
            "placeholders": [
                {
                    "id": "Name",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "unparsedConfig.Name"
                }
            ]
        },
        {
            "id": "Unable to import configuration: {LastErr}",
            "message": "Unable to import configuration: {LastErr}",
            "translation": "",
            "placeholders": [
                {
                    "id": "LastErr",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "lastErr"
                }
            ]
        },
        {
            "id": "Imported tunnels",
            "message": "Imported tunnels",
            "translation": ""
        },
        {
            "id": "Imported {M} tunnels",
            "message": "Imported {M} tunnels",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "M",
                    "cases": {
                        "one": {
                            "msg": "Imported {M} tunnel"
                        },
                        "other": {
                            "msg": "Imported {M} tunnels"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "M",
                    "string": "%[1]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 1,
                    "expr": "m"
                }
            ]
        },
        {
            "id": "Imported {M} of {N} tunnels",
            "message": "Imported {M} of {N} tunnels",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "N",
                    "cases": {
                        "one": {
                            "msg": "Imported {M} of {N} tunnel"
                        },
                        "other": {
                            "msg": "Imported {M} of {N} tunnels"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "M",
                    "string": "%[1]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 1,
                    "expr": "m"
                },
                {
                    "id": "N",
                    "string": "%[2]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 2,
                    "expr": "n"
                }
            ]
        },
        {
            "id": "Unable to create tunnel",
            "message": "Unable to create tunnel",
            "translation": ""
        },
        {
            "id": "Delete {TunnelCount} tunnels",
            "message": "Delete {TunnelCount} tunnels",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "TunnelCount",
                    "cases": {
                        "one": {
                            "msg": "Delete {TunnelCount} tunnel"
                        },
                        "other": {
                            "msg": "Delete {TunnelCount} tunnels"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "TunnelCount",
                    "string": "%[1]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 1,
                    "expr": "tunnelCount"
                }
            ]
        },
        {
            "id": "Are you sure you would like to delete {TunnelCount} tunnels?",
            "message": "Are you sure you would like to delete {TunnelCount} tunnels?",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "TunnelCount",
                    "cases": {
                        "one": {
                            "msg": "Are you sure you would like to delete {TunnelCount} tunnel?"
                        },
                        "other": {
                            "msg": "Are you sure you would like to delete {TunnelCount} tunnels?"
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "TunnelCount",
                    "string": "%[1]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 1,
                    "expr": "tunnelCount"
                }
            ]
        },
        {
            "id": "Delete tunnel ‘{TunnelName}’",
            "message": "Delete tunnel ‘{TunnelName}’",
            "translation": "",
            "placeholders": [
                {
                    "id": "TunnelName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "tunnelName"
                }
            ]
        },
        {
            "id": "Are you sure you would like to delete tunnel ‘{TunnelName}’?",
            "message": "Are you sure you would like to delete tunnel ‘{TunnelName}’?",
            "translation": "",
            "placeholders": [
                {
                    "id": "TunnelName",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "tunnelName"
                }
            ]
        },
        {
            "id": "{Question} You cannot undo this action.",
            "message": "{Question} You cannot undo this action.",
            "translation": "",
            "placeholders": [
                {
                    "id": "Question",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "question"
                }
            ]
        },
        {
            "id": "Unable to delete tunnel",
            "message": "Unable to delete tunnel",
            "translation": ""
        },
        {
            "id": "A tunnel was unable to be removed: {Error}",
            "message": "A tunnel was unable to be removed: {Error}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Error",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "errors[0].Error()"
                }
            ]
        },
        {
            "id": "Unable to delete tunnels",
            "message": "Unable to delete tunnels",
            "translation": ""
        },
        {
            "id": "{Lenerrors} tunnels were unable to be removed.",
            "message": "{Lenerrors} tunnels were unable to be removed.",
            "translation": {
                "select": {
                    "feature": "plural",
                    "arg": "Lenerrors",
                    "cases": {
                        "one": {
                            "msg": "{Lenerrors} tunnel was unable to be removed."
                        },
                        "other": {
                            "msg": "{Lenerrors} tunnels were unable to be removed."
                        }
                    }
                }
            },
            "placeholders": [
                {
                    "id": "Lenerrors",
                    "string": "%[1]d",
                    "type": "int",
                    "underlyingType": "int",
                    "argNum": 1,
                    "expr": "len(errors)"
                }
            ]
        },
        {
            "id": "Configuration Files (*.zip, *.conf)|*.zip;*.conf|All Files (*.*)|*.*",
            "message": "Configuration Files (*.zip, *.conf)|*.zip;*.conf|All Files (*.*)|*.*",
            "translation": ""
        },
        {
            "id": "Import tunnel(s) from file",
            "message": "Import tunnel(s) from file",
            "translation": ""
        },
        {
            "id": "Configuration ZIP Files (*.zip)|*.zip",
            "message": "Configuration ZIP Files (*.zip)|*.zip",
            "translation": ""
        },
        {
            "id": "Export tunnels to zip",
            "message": "Export tunnels to zip",
            "translation": ""
        },
        {
            "id": "{Title} (unsigned build, no updates)",
            "message": "{Title} (unsigned build, no updates)",
            "translation": "",
            "placeholders": [
                {
                    "id": "Title",
                    "string": "%[1]s",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 1,
                    "expr": "mtw.Title()"
                }
            ]
        },
        {
            "id": "Error Exiting WireGuard",
            "message": "Error Exiting WireGuard",
            "translation": ""
        },
        {
            "id": "Unable to exit service due to: {Err}. You may want to stop WireGuard from the service manager.",
            "message": "Unable to exit service due to: {Err}. You may want to stop WireGuard from the service manager.",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "An update to WireGuard is available. It is highly advisable to update without delay.",
            "message": "An update to WireGuard is available. It is highly advisable to update without delay.",
            "translation": ""
        },
        {
            "id": "Status: Waiting for user",
            "message": "Status: Waiting for user",
            "translation": ""
        },
        {
            "id": "Update Now",
            "message": "Update Now",
            "translation": ""
        },
        {
            "id": "Status: Waiting for updater service",
            "message": "Status: Waiting for updater service",
            "translation": ""
        },
        {
            "id": "Error: {Err}. Please try again.",
            "message": "Error: {Err}. Please try again.",
            "translation": "",
            "placeholders": [
                {
                    "id": "Err",
                    "string": "%[1]v",
                    "type": "error",
                    "underlyingType": "interface{Error() string}",
                    "argNum": 1,
                    "expr": "err"
                }
            ]
        },
        {
            "id": "Status: Complete!",
            "message": "Status: Complete!",
            "translation": ""
        },
        {
            "id": "http2: Framer {F}: failed to decode just-written frame",
            "message": "http2: Framer {F}: failed to decode just-written frame",
            "translation": "",
            "placeholders": [
                {
                    "id": "F",
                    "string": "%[1]p",
                    "type": "*net/http.http2Framer",
                    "underlyingType": "*net/http.http2Framer",
                    "argNum": 1,
                    "expr": "f"
                }
            ]
        },
        {
            "id": "http2: Framer {F}: wrote {Http2summarizeFramefr}",
            "message": "http2: Framer {F}: wrote {Http2summarizeFramefr}",
            "translation": "",
            "placeholders": [
                {
                    "id": "F",
                    "string": "%[1]p",
                    "type": "*net/http.http2Framer",
                    "underlyingType": "*net/http.http2Framer",
                    "argNum": 1,
                    "expr": "f"
                },
                {
                    "id": "Http2summarizeFramefr",
                    "string": "%[2]v",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "http2summarizeFrame(fr)"
                }
            ]
        },
        {
            "id": "http2: Framer {Fr}: read {Http2summarizeFramef}",
            "message": "http2: Framer {Fr}: read {Http2summarizeFramef}",
            "translation": "",
            "placeholders": [
                {
                    "id": "Fr",
                    "string": "%[1]p",
                    "type": "*net/http.http2Framer",
                    "underlyingType": "*net/http.http2Framer",
                    "argNum": 1,
                    "expr": "fr"
                },
                {
                    "id": "Http2summarizeFramef",
                    "string": "%[2]v",
                    "type": "string",
                    "underlyingType": "string",
                    "argNum": 2,
                    "expr": "http2summarizeFrame(f)"
                }
            ]
        },
        {
            "id": "http2: decoded hpack field {HeaderField}",
            "message": "http2: decoded hpack field {HeaderField}",
            "translation": "",
            "placeholders": [
                {
                    "id": "HeaderField",
                    "string": "%+[1]v",
                    "type": "vendor/golang.org/x/net/http2/hpack.HeaderField",
                    "underlyingType": "struct{Name string; Value string; Sensitive bool}",
                    "argNum": 1,
                    "expr": "hf"
                }
            ]
        }
    ]
}